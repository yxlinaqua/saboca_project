# on MCN1
#source ~aweiss/initboa.csh

from fortran import fStat
import string
sabocadir = os.getenv('BOA_LOCAL_SABOCA') + '/'
execfile(sabocadir + 'saboca-cabling.py')	      
execfile(sabocadir + 'boaSaboca.py')
execfile(sabocadir + 'saboca-secondary-fluxes.py')
execfile(sabocadir + 'saboca-planet-flux.py')

def sky(ScanNr=0):
    '''
    Reduces a bolotip (hot+skydip) measurement with LABOCA.
    Mandatory parameter: Scan number of the SKYDIP scan.
    '''
    if (ScanNr != 0):
        scannr = ScanNr-1
        #execfile('reduce-skydip-blind.boa')
        execfile('sskydip.boa')
    else:
        print "No scan defined."

def cal(ScanNr=0,tau=0.0):
    #from fortran import fStat
    #import string
    #NOTE: "sabocadir" should be taken from 
    #the environment variable $BOA_HOME_SABOCA
    #but it is not yet implemented (as of 20100524)
    #check it:
    #if not os.getenv('BOA_LOCAL_SABOCA'):
    #   raise 'Environment variable BOA_LOCAL_SABOCA undefined'
    #for now, use the LABOCA one instead
    #sabocadir = os.getenv('BOA_LOCAL_SABOCA')
    #execfile(sabocadir + '/saboca-cabling.py')
    #execfile(sabocadir + '/boaSaboca.py')
    #execfile(sabocadir + '/saboca-secondary-fluxes.py')
    #execfile(sabocadir + '/saboca-planet-flux.py')
    read(str(ScanNr))



    if (tau == 0.0):
    	 #tau = 0.8
    	 tau = scanTau()
    	 print 'No opacity value passed, using ATM model: tau_z = %3.3f'%(tau)
    data.correctOpacity(tau)


    data.zeroStart()
    data.Data *= array(VtoJy,'f')

    mjdref = data.ScanParam.MJD[0]
    rcp=getSabocaRCP(mjdref)
    data.MessHand.info("RCP file : %s " % rcp)
    data.BolometerArray.updateRCP(rcp)
    print rcp
#
    bad=getSabocaCross(mjdref)
    data.MessHand.info("Bad channels : %s " % bad)
    data.flagChannels(bad)
#
    inverted=getSabocaInvert(mjdref)
    data.MessHand.info("Inverted channels : %s " % inverted)
    invertSomeChannels(inverted)
#
    data.flatfield()

    data.flagFractionRms()
    data.flagSpeed(below=10.)
    data.flagSpeed(above=150.)
    data.flagAccel(above=800.)

    source_name = data.ScanParam.Object
    scannr= data.ScanParam.ScanNum
    scandate=data.ScanParam.DateObs

    base(order=1)
    data.flagPosition(radius=30,flag=8)
    medianNoiseRemoval(chanRef=-1,factor=0.8,nbloop=5)
    base(order=0)
#weight()

    source_name = data.ScanParam.Object

    if source_name not in ['Mars','Saturn','Jupiter','Venus']:
	    data.flagFractionRms(ratio=5)
	    medianNoiseRemoval(chanRef=-1,factor=0.8,nbloop=5)
            base(order=0)

    if source_name in ['Saturn','Jupiter']:
	    unflag(flag=8)
	    data.flagPosition(radius=50,flag=8)
	
#medianNoiseRemoval(chanRef=-1,factor=0.9,nbloop=3)
#data.flagFractionRms(ratio=5)
#despike(below=-5,above=5)

#if source_name == 'HLTAU' or source_name == 'VYCma' or source_name == 'V883-ORI':
#                data.medianNoiseRemoval(range(1,11),chanRef=-1,factor=0.9,nbloop=2)
#                data.medianNoiseRemoval(range(11,20),chanRef=-1,factor=0.9,nbloop=2)
#                data.medianNoiseRemoval(range(20,29),chanRef=-1,factor=0.9,nbloop=2)
#                data.medianNoiseRemoval(range(29,38),chanRef=-1,factor=0.9,nbloop=2)
#                data.polynomialBaseline(order=1)
#                data.despike()
#                data.flattenFreq(below=0.2,hiref=0.35)
#                despike()
#                base(order=1)

    if source_name != 'Mars':
       weight()

    unflag(flag=8)
    data.doMap(sizeX=[-50,50],sizeY=[-50,50],oversamp=5,noPlot=1)

    print "Solving for pointing on map..."
    solvePointingOnMap(plot=1,radius=20)
    obsfluxmap = data.PointingResult['gauss_peak']['value']
    daz=data.PointingResult['gauss_x_offset']['value']
    delev=data.PointingResult['gauss_y_offset']['value']

    try:
            print "Solving for pointing on data..."
	    data.flagPosition(radius=40,flag=8)
	    despike()
	    despike()
	    unflag(flag=8)
            data.PointingResult = -1
 	    data.solvePointing(radius=30)
	    obsfluxdata = data.PointingResult['gauss_peak']['value']
    except:
            print "Fit on data did not converge"
	    obsfluxdata = 0.0


    expect_flux = 0.

    if source_name in ['Uranus','Neptune','Mars','Saturn','Jupiter','Venus']:
	    astrotime,astrodate=getAstroDate(data)

            if string.find(data.BolometerArray.FeBe,'SABOCA') >= 0:
		    beam = 8.0
                    freq = 852.0

#the following line can be removed, this script is only for SABOCA
#        if string.find(data.BolometerArray.FeBe,'LABOCA') >= 0:
#		beam = 19.2
#                freq = 345
#		
#        if string.find(data.BolometerArray.FeBe,'BOLOSZ') >= 0:
#		beam = 60.0
#                freq = 151
#

# NOTE: the following call uses the function PlanetFlux
# defined in $BOA_HOME_SABOCA/saboca-planet-flux.py
#
	    print source_name,astrotime,astrodate,str(beam),str(freq)
            expect_flux = PlanetFlux(source_name,astrotime,astrodate,str(beam),str(freq))
    else:
	    if calibFluxes.has_key(string.upper(source_name)):
		expect_flux = calibFluxes[string.upper(source_name)]

    if expect_flux > 0:
	    calcorrdata = obsfluxdata/expect_flux
            calcorrmap = obsfluxmap/expect_flux
	    qcorrdata = abs(calcorrdata-1)
            qcorrmap  = abs(calcorrmap-1)
	    if obsfluxdata > 0:
		    obsflux = (obsfluxdata + obsfluxmap)/2.0
	    else:
		    obsflux = obsfluxmap
		
#here we need to define a better way, the following lines are dangerous
#	if qcorrdata < qcorrmap:			
#			obsflux = obsfluxdata
#        else:                        
#			obsflux = obsfluxmap



	    percent = 100.0*obsflux/expect_flux
            print "-------------------------------------------------------------"
            print "FLUX %s:  %7.2f [expected: %7.2f, %6.2f percent]"%(source_name,obsflux,expect_flux,percent)
            print "-------------------------------------------------------------"
	    print "pcorr %5.1f, %5.1f "%(daz,delev)
	    print "-------------------------------------------------------------"

    else:
            print "Calibrator not found in saboca-secondary-fluxes.py"


    scannr = data.ScanParam.ScanNum
    date = data.ScanParam.DateObs
    calcorr = percent/100.0

    print scannr, date, mjdref, calcorr
    scanel  = fStat.f_mean(data.ScanParam.El)
    taucorr = exp(tau/sin(scanel * pi / 180.))
    print taucorr
    
    f = file('calibration-long.dat','a')
    f.write('%10s  %i  %s %18.12f %5.3f %5.3f %7.3f %7.3f %5.3f %5.3f\n' %(source_name,scannr,scandate,mjdref,calcorr,taucorr,obsflux,expect_flux,scanel,tau))
    f.close

    f = file('calibration.dat','a')
    f.write('%i  %s %18.12f %5.3f %5.3f\n' %(scannr,scandate,mjdref,calcorr,taucorr))
    f.close
    
